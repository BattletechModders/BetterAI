{
  "behaviorVariables": [
    {
	    /* How much a location must be damaged before an overheat
	       attack will be considered, as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
      "k": "Float_ExistingTargetDamageForOverheatAttack",
      "v": {
        "type": "Float",
        "floatVal": 0.5
      }
    },
    {
	    /* Maximum leg damage allowed for DFA attack (above which
	       attacks will not be considered), as a fraction from 0.0
	       (undamaged) to 1.0 (location destroyed) */
      "k": "Float_OwnMaxLegDamageForDFAAttack",
      "v": {
        "type": "Float",
        "floatVal": 0.3
      }
    },
    {
	    /* Influence Factor Weight for preferring moving less. */
      "k": "Float_PreferLowerMovementFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": -1.5
      }
    },
    {
	    /* Influence Factor Weight for preferring higher
	       elevations. */
      "k": "Float_PreferHigherPositionFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.0
      }
    },
    {
	    /* Influence Factor Weight for preferring higher
	       elevations WHEN SPRINTING. */
      "k": "Float_SprintPreferHigherPositionFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.0
      }
    },
    {
	    /* Influence Factor Weight to maximize expected damage to
	       hostiles.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat */
      "k": "Float_PreferHigherExpectedDamageToHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 3.5
      }
    },
    {
	    /* Influence Factor Weight to minimize expected damage
	       from hostiles. */
      "k": "Float_PreferLowerExpectedDamageFromHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.0
      }
    },
    {
	    /* Influence Factor Weight to minimize expected damage
	       from hostiles WHEN SPRINTING. */
      "k": "Float_SprintPreferLowerExpectedDamageFromHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.0
      }
    },
    {
	    /* Influence Factor Weight to prefer locations close to
	       optimal distance to other allies. */
      "k": "Float_PreferOptimalDistanceToAllyFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.2
      }
    },
    {
	    /* When considering different kinds of attacks, multiply
	       the melee damage by this value to decide which attack
	       to use. */
      "k": "Float_MeleeDamageMultiplier",
      "v": {
        "type": "Float",
        "floatVal": 1
      }
    },
    {
	    /* When considering different kinds of attacks, multiply
	       the DFA damage by this value to decide which attack to
	       use. */
      "k": "Float_DFADamageMultiplier",
      "v": {
        "type": "Float",
        "floatVal": 1.2
      }
    },
    {
	    /* Influence Factor Weight to control the desire to be
	       inside e.g. forests. */
      "k": "Float_PreferLessTargetableLocationFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.6
      }
    },
    {
	    /* Influence Factor Weight to control the desire to be
	       inside e.g. forests WHEN SPRINTING. */
      "k": "Float_SprintPreferLessTargetableLocationFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.7
      }
    },
    {
	    /* If a target is a melee revenge target, what additional
	       damage multiplier to apply. The total multiplier is
	       Float_MeleeDamageMultiplier +
	       FloatMeleeRevengeBonus. */
      "k": "Float_MeleeRevengeBonus",
      "v": {
        "type": "Float",
        "floatVal": 2.0
      }
    },
    {
	    /* If a target is a melee revenge target, but the ratio of
	       its expected melee damage to my expected melee damage
	       is higher than this threshold, DO NOT MELEE! It'll all
	       end in tears! */
      "k": "Float_MeleeDamageRatioCap",
      "v": {
        "type": "Float",
        "floatVal": 1.25
      }
    },
    {
	    /* A weight for an influence factor to prefer to get
	       inside melee range. Negative values will encourage
	       units to get out of melee range. */
      "k": "Float_PreferInsideMeleeRangeFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": -1.0
      }
    },
    {
	    /* A weight for an influence factor to prefer to get
	       inside melee range WHEN SPRINTING. Negative values will
	       encourage units to get out of melee range. */
      "k": "Float_SprintPreferInsideMeleeRangeFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": -1.0
      }
    },
    {
	    /* If unsteady, the chance of just deciding to switch to
	       defensive. */
      "k": "Float_UnsteadyCausesDefensiveMovePercentage",
      "v": {
        "type": "Float",
        "floatVal": 60
      }
    },
    {
	    /* How much of expected melee damage to add in again as
	       bonus damage when attacking evasive targets (0 - none,
	       1 - 100% bonus damage) */
      "k": "Float_MeleeBonusMultiplierWhenAttackingEvasiveTargets",
      "v": {
        "type": "Float",
        "floatVal": 1.5
      }
    },
    {
	    /* How much of expected melee damage to add in again as
	       bonus damage when attacking braced targets (0 - none,
	       1 - 100% bonus damage) */
      "k": "Float_MeleeBonusMultiplierWhenAttackingBracedTargets",
      "v": {
        "type": "Float",
        "floatVal": 1.0
      }
    },
    {
	    /* Percentage (0-100) of best available move that will be
	       accepted for bulwark skill moves. */
      "k": "Float_BulwarkThresholdPercentage",
      "v": {
        "type": "Float",
        "floatVal": 0.0
      }
    },
    {
	    /* The base percentage chance (0-100) to reserve. */
      "k": "Float_ReserveBasePercentage",
      "v": {
        "type": "Float",
        "floatVal": 80
      }
    },
    {
	    /* Weight to prefer not being in locations that have
	       lethal amounts of expected damage */
      "k": "Float_PreferNotLethalPositionFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.0
      }
    },
    {
	    /* Weight to prefer sprinting to locations that do not
	       have lethal amounts of expected damage */
      "k": "Float_SprintPreferNotLethalPositionFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.7
      }
    },
    {
	    /* Percentage (100.0 equals 100%) of unit's hit points
	       below which damage is considered not lethal. Used by
	       PreferNotLethalPositionFactor. */
      "k": "Float_OverkillThresholdLowForLethalPositionFactor",
      "v": {
        "type": "Float",
        "floatVal": 75
      }
    },
    {
	    /* Percentage (100.0 equals 100%) of unit's hit points
	       above which damage is considered lethal. Used by
	       PreferNotLethalPositionFactor. */
      "k": "Float_OverkillThresholdHighForLethalPositionFactor",
      "v": {
        "type": "Float",
        "floatVal": 95
      }
    },
    {
	    /* If a hostile actor can do this percentage (100.0
	       equals 100%) of one of my unit's hit points, do
	       not reserve. */
      "k": "Float_OverkillFactorForReserve",
      "v": {
        "type": "Float",
        "floatVal": 60.0
      }
    },
    {
	    /* Appetitive Influence Factor Weight to approach
	       hostile's rear arc. */
      "k": "Float_AppetitivePreferApproachingRearArcOfHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.8
      }
    },
    {
	    /* Appetitive Influence Factor Weight to approach
	       hostile's rear arc WHEN SPRINTING. */
      "k": "Float_SprintAppetitivePreferApproachingRearArcOfHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.0
      }
    },
    {
	    /* Radius (in meters) to avoid sprinting within. */
      "k": "Float_SprintExclusionRadius",
      "v": {
        "type": "Float",
        "floatVal": 196.0
      }
    },
    {
	    /* Influence Factor to prefer this lance to surround hostile units.*/
      "k": "Float_PreferSurroundingHostileUnitsFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.25
      }
    },
    {
	    /* Influence Factor to prefer this lance to surround
	       hostile units WHEN SPRINTING.*/
      "k": "Float_SprintPreferSurroundingHostileUnitsFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 1.5
      }
    },
    {
	    /* Influence Factor to prefer not to be surrounded by hostile units.*/
      "k": "Float_PreferNotSurroundedByHostileUnitsFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.3
      }
    },
    {
	    /* Sprint Hysteresis Multiplier value, the value
	       multiplies the "sprint juice level" when a sprint move
	       happens. Values can be between 0.0 and 1.0, with larger
	       values (closer to 1.0) leaving more "sprint juice"
	       around for next turn. */
      "k": "Float_SprintHysteresisRecoveryTurns",
      "v": {
        "type": "Float",
        "floatVal": 2.0
      }
    },
    {
	    /* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance. Note - negative logic; this should use negative
	       numbers, as it's designed to discourage being outside
	       the radius and have no effect inside the fence. */
      "k": "Float_PreferStayInsideFenceNegativeLogicFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": -5.0
      }
    },
    {
	    /* Weight for an influence factor that seeks to stay
	       within a circular fence from the centerpoint of the
	       lance WHEN SPRINTING. Note - negative logic; this
	       should use negative numbers, as it's designed to
	       discourage being outside the radius and have no effect
	       inside the fence. */
      "k": "Float_SprintPreferStayInsideFenceNegativeLogicFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": -1.0
      }
    },
    {
	    /* Fence radius (in meters) for
	     * PreferStayInsideFenceFactor. */
      "k": "Float_FenceRadius",
      "v": {
        "type": "Float",
        "floatVal": 120.0
      }
    },
    {
	    /* Description: Number of points of damage that a sensor
	      locking turn needs to do over a straight up shooting
	      turn before deciding to sensor lock. Positive is a
	      shooting bias, negative is a sensor lock bias.*/
      "k": "Float_MinimumSensorLockQuality",
      "v": {
        "type": "Float",
        "floatVal": 25
      }
    },
    {
	    /* Whether to use Bulwark actions*/
      "k": "Bool_UseBulwarkActions",
      "v": {
        "type": "Bool",
        "boolVal": true
      }
    },
    {
	    /* When a buddy is exposed to enemy fire alone, apply this
	     * weight to locations that DO NOT have line of fire to
	     * hostiles. Probably negative. */
      "k": "Float_BuddyAloneFiringSolutionPreferenceWeight",
      "v": {
        "type": "Float",
        "floatVal": -0.8
      }
    },
    {
	    /* When a buddy is exposed to enemy fire alone, apply this
	     * weight to locations that DO NOT have line of fire to
	     * hostiles WHEN SPRINTING. Probably negative. */
      "k": "Float_SprintBuddyAloneFiringSolutionPreferenceWeight",
      "v": {
        "type": "Float",
        "floatVal": -0.6
      }
    },
    {
	    /* When a buddy is exposed to enemy fire alone, close the
	     * distance to the alone unit by applying this weight
	     * proportionately to locations radiating out from the
	     * alone unit (e.g. the alone unit's location would get
	     * 0.0, this unit's location would get 1.0 * this
	     * weight. Probably negative. */
      "k": "Float_BuddyAloneMoveNearbyPreferenceWeight",
      "v": {
        "type": "Float",
        "floatVal": -1.2
      }
    },
    {
	    /* When a buddy is exposed to enemy fire alone, close the
	     * distance to the alone unit by applying this weight
	     * proportionately to locations radiating out from the
	     * alone unit (e.g. the alone unit's location would get
	     * 0.0, this unit's location would get 1.0 * this
	     * weight WHEN SPRINTING. Probably negative. */
      "k": "Float_SprintBuddyAloneMoveNearbyPreferenceWeight",
      "v": {
        "type": "Float",
        "floatVal": -0.8
      }
    },
    {
	    /* Influence Factor Weight for standing still when hostiles are in melee range. */
      "k": "Float_PreferStationaryWhenHostilesInMeleeRangeFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": -2.0
      }
    },
    {
	    /* Influence Factor Weight to prefer being behind
	       hostiles.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat */
      "k": "Float_PreferAttackFromBehindHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.8
      }
    },
    {
	    /* Influence Factor Weight to prefer being behind hostiles
	       WHEN SPRINTING.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat */
      "k": "Float_SprintPreferAttackFromBehindHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.5
      }
    },
    {
	    /* Influence Factor Weight to prefer being behind braced
	       targets.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat */
      "k": "Float_PreferBeingBehindBracedHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.6
      }
    },
    {
	    /* Influence Factor Weight to prefer being behind braced
	       targets WHEN SPRINTING.
	       Hostile Factor: 1.0 / 0.5 / 0.25 based on threat */
      "k": "Float_SprintPreferBeingBehindBracedHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.4
      }
    },
    {
	    /* Influence Factor Weight to prefer being far away WHEN
	       SPRINTING from closest hostile. Useful for defensive
	       moves. */
      "k": "Float_SprintPreferHigherDistanceFromClosestHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.3
      }
    },
    {
	    /* Influence Factor Weight to prefer having LOS to
	       fewest hostiles. Useful for defensive moves. */
      "k": "Float_PreferLOSToFewestHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.2
      }
    },
    {
	    /* Influence Factor Weight to prefer having LOS to fewest
	       hostiles WHEN SPRINTING. Useful for defensive moves. */
      "k": "Float_SprintPreferLOSToFewestHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.4
      }
    },
    {
	    /* Influence Factor Weight to prefer having LOS to most
		hostiles. */
      "k": "Float_PreferLOSToMostHostilesFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.0
      }
    },
    {
	    /* Influence Factor Weight to prefer having LOS to most
		hostiles WHEN SPRINTING. */
      "k": "Float_SprintPreferLOSToMostHostilesFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.0
      }
    }
  ]
}
