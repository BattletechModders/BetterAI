{
  "behaviorVariables": [
    {
      /* How much accuracy (0.0 - 1.0) is required to consider
         an attack that will overheat */
      "k": "Float_AccuracyNeededForOverheatAttack",
      "v": {
        "type": "Float",
        "floatVal": 0.75
      }
    },
    {
      /* How much a location must be damaged before an overheat
         attack will be considered, as a fraction from 0.0
         (undamaged) to 1.0 (location destroyed) */
      "k": "Float_ExistingTargetDamageForOverheatAttack",
      "v": {
        "type": "Float",
        "floatVal": 0.9
      }
    },
    {
      /* Maximum leg damage allowed for DFA attack (above which
         attacks will not be considered), as a fraction from 0.0
         (undamaged) to 1.0 (location destroyed) */
      "k": "Float_OwnMaxLegDamageForDFAAttack",
      "v": {
        "type": "Float",
        "floatVal": 0.95
      }
    },
    {
      /* Influence Factor Weight to maximize expected damage to
         hostiles.
         Hostile Factor: 1.0 / 0.5 / 0.25 based on threat */
      "k": "Float_PreferHigherExpectedDamageToHostileFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 3
      }
    },
    {
      /* Optimal distance to nearest hostile. (See
         Float_PreferOptimalDistanceToHostileFactorWeight.) */
      "k": "Float_OptimalHostileDistance",
      "v": {
        "type": "Float",
        "floatVal": 24
      }
    },
    {
      /* When considering different kinds of attacks, multiply
         the melee damage by this value to decide which attack
         to use. */
      "k": "Float_MeleeDamageMultiplier",
      "v": {
        "type": "Float",
        "floatVal": 5
      }
    },
    {
      /* When considering different kinds of attacks, multiply
         the DFA damage by this value to decide which attack to
         use. */
      "k": "Float_DFADamageMultiplier",
      "v": {
        "type": "Float",
        "floatVal": 12
      }
    },
    {
      /* Influence Factor Weight to control the desire to be
         inside water. */
      "k": "Float_PreferHigherHeatSinkLocationsFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.3
      }
    },
    {
      /* A weight for an influence factor to prefer to get
         inside melee range. Negative values will encourage
         units to get out of melee range. */
      "k": "Float_PreferInsideMeleeRangeFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.3
      }
    },
    {
      /* A weight for an influence factor to prefer to get
         inside melee range WHEN SPRINTING. Negative values will
         encourage units to get out of melee range. */
      "k": "Float_SprintPreferInsideMeleeRangeFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.3
      }
    },
    {
      /* If unsteady, the chance of just deciding to switch to
         defensive. */
      "k": "Float_UnsteadyCausesDefensiveMovePercentage",
      "v": {
        "type": "Float",
        "floatVal": 5
      }
    },
    {
      /* The base percentage chance (0-100) to reserve. */
      "k": "Float_ReserveBasePercentage",
      "v": {
        "type": "Float",
        "floatVal": 10
      }
    },
    {
      /* Positive values mean to go that much AFTER the average
         of the phases of remaining hostiles. */
      "k": "Float_ReserveHostileOffset",
      "v": {
        "type": "Float",
        "floatVal": 0.75
      }
    },
    {
      /* Threshold Percentage (100.0 equals 100%) of target hit
         points before we start trying to multi-target. */
      "k": "Float_MultiTargetOverkillThreshold",
      "v": {
        "type": "Float",
        "floatVal": 90
      }
    },
    {
      /* Base chance for a called shot to the head. Not "out of"
         100, or any fixed number, out of the total
         applicable. */
      "k": "Float_CalledShotHeadBaseChance",
      "v": {
        "type": "Float",
        "floatVal": 30
      }
    },
    {
      /* Radius (in meters) to avoid sprinting within. */
      "k": "Float_SprintExclusionRadius",
      "v": {
        "type": "Float",
        "floatVal": 48
      }
    },
    {
      /* Influence Factor to prefer not to be surrounded by hostile units.*/
      "k": "Float_PreferNotSurroundedByHostileUnitsFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.05
      }
    },
    {
      /* Influence Factor to prefer not to be surrounded by
         hostile units WHEN SPRINTING.*/
      "k": "Float_SprintPreferNotSurroundedByHostileUnitsFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.05
      }
    },
    {
      /* Weight for an influence factor that seeks to stay
         within a circular fence from the centerpoint of the
         lance. Note - negative logic; this should use negative
         numbers, as it's designed to discourage being outside
         the radius and have no effect inside the fence. */
      "k": "Float_PreferStayInsideFenceNegativeLogicFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0
      }
    },
    {
      /* Weight for an influence factor that seeks to stay
         within a circular fence from the centerpoint of the
         lance WHEN SPRINTING. Note - negative logic; this
         should use negative numbers, as it's designed to
         discourage being outside the radius and have no effect
         inside the fence. */
      "k": "Float_SprintPreferStayInsideFenceNegativeLogicFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0
      }
    },
    {
      /* Description: Number of points of damage that a sensor
         locking turn needs to do over a straight up shooting
         turn before deciding to sensor lock. Positive is a
         shooting bias, negative is a sensor lock bias.*/
      "k": "Float_MinimumSensorLockQuality",
      "v": {
        "type": "Float",
        "floatVal": 95
      }
    },
    {
      /* Weight for how much to prefer to be exposed to enemy
         fire alone. Probably negative. */
      "k": "Float_AlonePreferenceWeight",
      "v": {
        "type": "Float",
        "floatVal": 0
      }
    },
    {
      /* Weight for how much to prefer to be exposed to enemy
         fire alone WHEN SPRINTING. Probably negative. */
      "k": "Float_SprintAlonePreferenceWeight",
      "v": {
        "type": "Float",
        "floatVal": 0
      }
    },
    {
      /* Weight for an influence factor that seeks to stay
         within ECM range of friendlies */
      "k": "Float_PreferFriendlyECMFields",
      "v": {
        "type": "Float",
        "floatVal": 1
      }
    },
    {
      /* Weight for an influence factor that seeks to stay
         within ECM range of friendlies WHEN SPRINTING */
      "k": "Float_SprintPreferFriendlyECMFields",
      "v": {
        "type": "Float",
        "floatVal": 1
      }
    },
    {
      /* Minimum number of stealth pips to allow for an ECM
         ghosted mech to fire weapons */
      "k": "Int_MinimumECMGhostedPipsToFire",
      "v": {
        "type": "Int",
        "IntVal": "2"
      }
    },
    {
      /* Influence Factor Weight to prefer having LOS to most
         hostiles. */
      "k": "Float_PreferLOSToMostHostilesFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.25
      }
    },
    {
      /* Influence Factor Weight to prefer having LOS to most
         hostiles WHEN SPRINTING. */
      "k": "Float_SprintPreferLOSToMostHostilesFactorWeight",
      "v": {
        "type": "Float",
        "floatVal": 0.2
      }
    }
  ]
}